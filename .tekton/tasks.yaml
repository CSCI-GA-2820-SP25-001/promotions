apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pylint
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/categories: Code Quality
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: python, pylint
    tekton.dev/displayName: "pylint"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
      description: The workspace with the source code
  description: Run pylint against the code base
  params:
    - name: image
      description: Container image containing python & pylint
      default: quay.io/rofrano/python:3.11-slim
    - name: path
      description: Path to analyse
      default: "."
      type: string
    - name: args
      description: Extra CLI args for pylint
      type: array
      default: []
    - name: requirements-file
      description: Name of requirements file (optional)
      default: "requirements.txt"
  steps:
    - name: pylint
      image: $(params.image)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -e
        export PATH=$PATH:$HOME/.local/bin

        echo "*** installing runtime deps ***"
        if [ -e "poetry.lock" ]; then
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false
          poetry install
        elif [ -e "Pipfile" ]; then
          python -m pip install --upgrade pip pipenv
          pipenv install --system --dev
        elif [ -e "$(params.requirements-file)" ]; then
          python -m pip install -r "$(params.requirements-file)"
        fi

        echo "*** installing pylint ***"
        python -m pip install pylint

        echo "*** running pylint with custom rules ***"
        pylint --exit-zero \
          --ignore=features \
          --disable=C0114,C0116,W0611,E0102,W3101,C0411,W0621,W0404 \
          --generated-members=behave.* \
          "$(params.path)"
      args:
        - "$(params.args)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: testing
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Testing
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: python, pytest
    tekton.dev/displayName: "pytest tests"
    tekton.dev.platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
  description: |
    Run unit tests with pytest. Supports requirements.txt, Pipfile, or poetry.lock.
  params:
    - name: pytest-args
      type: array
      default: []
    - name: secret-name
      type: string
      default: "postgres-creds"
    - name: secret-key
      type: string
      default: "database_uri"
  steps:
    - name: pytest
      image: quay.io/rofrano/python:3.11-slim
      workingDir: $(workspaces.source.path)
      env:
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: $(params.secret-name)
              key: $(params.secret-key)
      script: |
        #!/usr/bin/env bash
        set -e
        export PATH=$PATH:$HOME/.local/bin

        echo "*** installing deps for tests ***"
        if [ -e "poetry.lock" ]; then
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false
          poetry install
        elif [ -e "Pipfile" ]; then
          python -m pip install --upgrade pip pipenv
          pipenv install --system --dev
        elif [ -e "requirements.txt" ]; then
          python -m pip install -r requirements.txt
        fi

        python -m pip install pytest
        echo "*** running pytest ***"
        pytest --version
        pytest "$@"
      args:
        - "$(params.pytest-args)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-image
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: openshift, deploy
    tekton.dev/displayName: "deploy image"
    tekton.dev.platforms: "linux/amd64"
spec:
  workspaces:
    - name: source
  description: Update deployment.yaml with new image and apply manifests
  params:
    - name: image-name
      type: string
    - name: manifest-dir
      type: string
      default: "k8s"
  steps:
    - name: deploy
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash","-c"]
      args:
        - |
          set -e
          echo "Applying manifests in $(params.manifest-dir)"
          wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/bin/yq
          yq -i '.spec.template.spec.containers[0].image="$(params.image-name)"' \
              $(params.manifest-dir)/deployment.yaml
          oc apply -f $(params.manifest-dir)/deployment.yaml
          oc apply -f $(params.manifest-dir)/service.yaml
          sleep 3
          oc get pods
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: apply-manifests
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: openshift, deploy
    tekton.dev/displayName: "deploy"
    tekton.dev.platforms: "linux/amd64"
spec:
  workspaces:
    - name: source
  description: Apply all yaml files in manifest dir
  params:
    - name: manifest-dir
      type: string
      default: "k8s"
  steps:
    - name: apply
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash","-c"]
      args:
        - |
          set -e
          oc apply -f $(params.manifest-dir)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev.categories: Image Build
    tekton.dev/tags: docker
    tekton.dev/displayName: "Build and Push Image"
spec:
  params:
    - name: IMAGE
      type: string
      description: Full image name (registry/repo:tag)
  workspaces:
    - name: source
      description: Source code & Dockerfile
  steps:
    - name: buildah
      image: quay.io/buildah/stable:latest
      securityContext:
        privileged: true
        runAsUser: 0  # Required for root build operations
      workingDir: /workspace/source
      script: |
        #!/usr/bin/env bash
        set -ex
        echo "=== building image $(params.IMAGE) ==="
        buildah bud --layers -f Dockerfile -t $(params.IMAGE) .
        echo "=== pushing image ==="
        buildah push $(params.IMAGE)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: behave-test
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev.categories: Testing
    tekton.dev/tags: python, behave
    tekton.dev/displayName: "Run Behave BDD Tests"
spec:
  params:
    - name: BASE_URL
      type: string
      description: Base URL of deployed service
  workspaces:
    - name: source
      description: Source code incl. features/
  steps:
    - name: behave
      image: quay.io/rofrano/python:3.11-slim
      workingDir: $(workspaces.source.path)
      env:
        - name: BASE_URL
          value: $(params.BASE_URL)
      script: |
        #!/usr/bin/env bash
        set -e
        pip install behave requests
        echo "=== running behave tests against $BASE_URL ==="
        behave
